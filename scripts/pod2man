#! /usr/bin/env python3

import argparse
import subprocess
import sys
import tempfile

def find_real_pod2man():
    """
    Find the real pod2man binary by removing the path to this pod2man from PATH
    then searching for pod2man.
    """
    import os
    import shutil

    paths = os.environ["PATH"].split(os.pathsep)
    fullpath = os.path.realpath(sys.argv[0])
    thispath = os.path.dirname(fullpath)
    paths.remove(thispath)
    paths = os.pathsep.join(paths)
    realpod = shutil.which("pod2man", path=paths)
    if realpod == fullpath:
        sys.exit(1)
    return realpod

parser = argparse.ArgumentParser()
parser.add_argument("-c", "--center")
parser.add_argument("-d", "--date")
parser.add_argument("--errors")
parser.add_argument("--fixed")
parser.add_argument("--fixedbold")
parser.add_argument("--fixeditalic")
parser.add_argument("--fixedbolditalic")
parser.add_argument("-l", "--lax", action="store_true")
parser.add_argument("--lquote")
parser.add_argument("--rquote")
parser.add_argument("-n", "--name")
parser.add_argument("-nourls", action="store_true")
parser.add_argument("-o", "--official", action="store_true")
parser.add_argument("-q", "--quotes")
parser.add_argument("-r", "--release")
parser.add_argument("-s", "--section")
parser.add_argument("--stderr", action="store_true")
parser.add_argument("-u", "--utf8", action="store_true")
parser.add_argument("-v", "--verbose", action="store_true")
parser.add_argument("input", nargs="?", default="-")
parser.add_argument("output", nargs="?", default="-")

args = parser.parse_args()
arglist = [find_real_pod2man()]

for k, v in vars(args).items():
    if k == "input" or k == "output":
        continue
    if v is not None:
        if isinstance(v, bool):
            if v:
                arglist.append("--%s" % (k))
        elif isinstance(v, str):
            arglist.append("--%s='%s'" % (k, v))
        else:
            print("Cannot express %s (%s)" % (k, type(v)))
            sys.exit(1)
arglist.append(args.input)

with tempfile.NamedTemporaryFile(prefix="pod2man-wrapper-") as output:
    arglist.append(output.name)
    subprocess.check_call(arglist)

    if args.output == "-":
        out = open(sys.stdout.fileno(), "wb")
    else:
        out = open(args.output, "wb")

    for l in output:
        if b"Automatically generated by Pod::Man" in l:
            out.write(b'.\\" Automatically generated by Pod::Man\n')
        else:
            out.write(l)
