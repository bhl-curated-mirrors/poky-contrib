diff --git a/bin/autom4te.in b/bin/autom4te.in
index 20ecca9e..9aa0d1f1 100644
--- a/bin/autom4te.in
+++ b/bin/autom4te.in
@@ -546,21 +546,38 @@ sub handle_output ($$)
     foreach (sort keys %forbidden);
   verb "allowed   tokens: $allowed";
 
-  # Read the (cached) raw M4 output, produce the actual result.  We
-  # have to use the 2nd arg to have Autom4te::XFile honor the third, but then
-  # stdout is to be handled by hand :(.  Don't use fdopen as it means
-  # we will close STDOUT, which we already do in END.
-  my $out = new Autom4te::XFile;
+  # Read the (cached) raw M4 output, produce the actual result.
+  # If we are writing to a regular file, replace it atomically.
+  my $atomic_replace = 0;
+  my $out;
   if ($output eq '-')
     {
-      $out->open (">$output");
+      # Don't just make $out be STDOUT, because then we would close STDOUT,
+      # which we already do in END.
+      $out = new Autom4te::XFile ('>&STDOUT');
+    }
+  elsif (-e $output && ! -f $output)
+    {
+      $out = new Autom4te::XFile ($output, '>');
     }
   else
     {
-      $out->open ($output, O_CREAT | O_WRONLY | O_TRUNC, oct ($mode));
+      my (undef, $outdir, undef) = fileparse ($output);
+
+      use File::Temp ();
+      $out = new File::Temp (UNLINK => 0, DIR => $outdir);
+      fatal "cannot create a file in $outdir: $!"
+        unless $out;
+
+      # File::Temp doesn't give us access to 3-arg open(2), unfortunately.
+      # In older Perls, implicit conversion of a File::Temp to its filename
+      # cannot be relied upon.
+      chmod (oct ($mode) & ~(umask), $out->filename)
+        or fatal "setting mode of " . $out->filename . ": $!";
+
+      $atomic_replace = 1;
     }
-  fatal "cannot create $output: $!"
-    unless $out;
+
   my $in = new Autom4te::XFile ($ocache . $req->id, "<");
 
   my %prohibited;
@@ -585,7 +602,8 @@ sub handle_output ($$)
       foreach (split (/\W+/))
 	{
 	  $prohibited{$_} = $.
-	    if !/^$/ && /$forbidden/o && !/$allowed/o && ! exists $prohibited{$_};
+	    if !/^$/ && /$forbidden/o && !/$allowed/o
+               && ! exists $prohibited{$_};
 	}
 
       # Performed *last*: the empty quadrigraph.
@@ -595,6 +613,8 @@ sub handle_output ($$)
     }
 
   $out->close();
+  update_file ($out->filename, $output, $force)
+    if $atomic_replace;
 
   # If no forbidden words, we're done.
   return
diff --git a/bin/autoreconf.in b/bin/autoreconf.in
index ccbd6c47..ec0a12e2 100644
--- a/bin/autoreconf.in
+++ b/bin/autoreconf.in
@@ -414,7 +414,7 @@ sub autoreconf_current_directory ($)
 	  s/dnl.*//;
 	  $uses_autoconf = 1 if /AC_INIT/;
 	  # See below for why we look for gettext here.
-	  $uses_gettext = 1  if /^AM_GNU_GETTEXT_VERSION/;
+	  $uses_gettext = 1  if /^AM_GNU_GETTEXT_(?:REQUIRE_)?VERSION/;
 	}
       if (!$uses_autoconf)
         {
@@ -442,12 +442,12 @@ sub autoreconf_current_directory ($)
   # not.  I guess that once Gettext move to 2.5x we will be able to,
   # but in the meanwhile forget it.
   #
-  # We can only grep for AM_GNU_GETTEXT_VERSION in configure.ac.  You
-  # might think this approach is naive, and indeed it is, as it
-  # prevents one to embed AM_GNU_GETTEXT_VERSION in another *.m4, but
-  # anyway we don't limit the generality, since... that's what
-  # autopoint does.  Actually, it is even more restrictive, as it
-  # greps for '^AM_GNU_GETTEXT_VERSION('.  We did this above, while
+  # We can only grep for AM_GNU_GETTEXT_(REQUIRE_)?VERSION in configure.ac.
+  # You might think this approach is naive, and indeed it is, as it prevents
+  # one to embed AM_GNU_GETTEXT_(REQUIRE_)?VERSION in another *.m4, but
+  # anyway we don't limit the generality, since... that's what autopoint does.
+  # Actually, it is even more restrictive, as it greps for
+  # '^AM_GNU_GETTEXT_(REQUIRE_)?VERSION('.  We did this above, while
   # scanning configure.ac.
   if (!$uses_gettext)
     {
@@ -611,9 +611,13 @@ sub autoreconf_current_directory ($)
     }
 
   # Gettext consistency checks...
-  error $configure_ac, "AM_GNU_GETTEXT is used, but not AM_GNU_GETTEXT_VERSION"
+  error($configure_ac,
+        "AM_GNU_GETTEXT is used, but not AM_GNU_GETTEXT_VERSION"
+        . " or AM_GNU_GETTEXT_REQUIRE_VERSION")
     if $uses_gettext_via_traces && ! $uses_gettext;
-  error $configure_ac, "AM_GNU_GETTEXT_VERSION is used, but not AM_GNU_GETTEXT"
+  error($configure_ac,
+        "AM_GNU_GETTEXT_VERSION or AM_GNU_GETTEXT_REQUIRE_VERSION is used,"
+        . " but not AM_GNU_GETTEXT")
     if $uses_gettext && ! $uses_gettext_via_traces;
 
 
diff --git a/lib/autoconf/c.m4 b/lib/autoconf/c.m4
index ca63dc58..a31d2d33 100644
--- a/lib/autoconf/c.m4
+++ b/lib/autoconf/c.m4
@@ -1993,8 +1993,8 @@ AC_DEFUN([AC_C_FLEXIBLE_ARRAY_MEMBER],
 	    #include <stddef.h>
 	    struct s { int n; double d[]; };]],
 	  [[int m = getchar ();
-	    struct s *p = malloc (offsetof (struct s, d)
-				  + m * sizeof (double));
+	    struct s *p = (struct s *) malloc (offsetof (struct s, d)
+					       + m * sizeof (double));
 	    p->d[0] = 0.0;
 	    return p->d != (double *) NULL;]])],
        [ac_cv_c_flexmember=yes],
diff --git a/lib/autoconf/functions.m4 b/lib/autoconf/functions.m4
index e474984f..a91eeebc 100644
--- a/lib/autoconf/functions.m4
+++ b/lib/autoconf/functions.m4
@@ -1699,7 +1699,7 @@ AC_CACHE_CHECK([whether strerror_r returns char *],
 	       [ac_cv_func_strerror_r_char_p], [
     ac_cv_func_strerror_r_char_p=no
     if test $ac_cv_have_decl_strerror_r = yes; then
-      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],
+      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([@%:@include <string.h>],
 	[[
 	  char buf[100];
 	  char x = *strerror_r (0, buf, sizeof buf);
diff --git a/lib/autoconf/general.m4 b/lib/autoconf/general.m4
index 4ec2317c..b74a441f 100644
--- a/lib/autoconf/general.m4
+++ b/lib/autoconf/general.m4
@@ -1789,7 +1789,7 @@ AC_DEFUN([AC_CONFIG_AUX_DIRS],
 # required auxiliary files, the script will bomb out.  This macro may also
 # be used as a trace hook by tools that wish to identify all of the required
 # auxiliary files.
-m4_define([AC_REQUIRE_AUX_FILE],
+AC_DEFUN([AC_REQUIRE_AUX_FILE],
 [AS_LITERAL_WORD_IF([$1],
   [m4_do(
     [AC_REQUIRE([_AC_INIT_AUX_DIR])],
diff --git a/lib/autoconf/programs.m4 b/lib/autoconf/programs.m4
index b352ce24..63e07043 100644
--- a/lib/autoconf/programs.m4
+++ b/lib/autoconf/programs.m4
@@ -747,6 +747,9 @@ fi])])
 AC_DEFUN([_AC_PROG_LEX_YYTEXT_DECL],
 [cat >conftest.l <<_ACEOF[
 %{
+#ifdef __cplusplus
+extern "C"
+#endif
 int yywrap(void);
 %}
 %%
diff --git a/lib/m4sugar/m4sh.m4 b/lib/m4sugar/m4sh.m4
index a1c1cd47..8f96eb7b 100644
--- a/lib/m4sugar/m4sh.m4
+++ b/lib/m4sugar/m4sh.m4
@@ -468,6 +468,15 @@ AS_IF([( set x; as_fn_ret_success y && test x = "[$]1" )], [],
 test x$exitcode = x0[]])# _AS_SHELL_FN_WORK
 
 
+# _AS_MODERN_CMDSUBST_WORKS
+# -------------------------
+# This is a spy to detect "in the wild" shells that do not support
+# the newer $(...) form of command substitutions.
+m4_define([_AS_MODERN_CMDSUBST_WORKS],
+[blah=$(echo $(echo blah))
+test x"$blah" = xblah])
+
+
 # _AS_SHELL_SANITIZE
 # ------------------
 # This is the prolog that is emitted by AS_INIT and AS_INIT_GENERATED;
@@ -544,6 +553,7 @@ m4_define([AS_SHELL_SANITIZE],
 m4_provide_if([AS_INIT], [],
 [m4_provide([AS_INIT])
 _AS_DETECT_REQUIRED([_AS_SHELL_FN_WORK])
+_AS_DETECT_REQUIRED([_AS_MODERN_CMDSUBST_WORKS])
 _AS_DETECT_REQUIRED([_AS_TEST_X_WORKS])
 _AS_DETECT_BETTER_SHELL
 _AS_UNSET_PREPARE
@@ -2177,6 +2187,7 @@ m4_divert_text([M4SH-INIT-FN], [m4_text_box([M4sh Shell Functions.])])
 m4_divert([BODY])dnl
 m4_text_box([Main body of script.])
 _AS_DETECT_REQUIRED([_AS_SHELL_FN_WORK])dnl
+_AS_DETECT_REQUIRED([_AS_MODERN_CMDSUBST_WORKS])dnl
 _AS_DETECT_REQUIRED([_AS_TEST_X_WORKS])dnl
 AS_REQUIRE([_AS_UNSET_PREPARE], [], [M4SH-INIT-FN])dnl
 ])
diff --git a/tests/tools.at b/tests/tools.at
index ba443816..967d9be1 100644
--- a/tests/tools.at
+++ b/tests/tools.at
@@ -450,7 +450,7 @@ _AS_BAR
 [dnl]
 ]])
 
-dnl This test needs autom4te's cache, in spite of any ~/.autom4te.cfg.
+# This test needs autom4te's cache, in spite of any ~/.autom4te.cfg.
 AT_DATA([.autom4te.cfg], [[
 begin-language: "Autoconf"
 args: --cache=autom4te.cache
@@ -460,6 +460,10 @@ args: --cache=autom4te.cache
 end-language: "Autoconf-without-aclocal-m4"
 ]])
 
+# Delay to make sure the cache files generated by the next command are
+# considered newer than configure.ac.
+sleep 2
+
 AT_CHECK_AUTOCONF([], 1, [],
 [[trailer.m4: warning: AC_INIT was never used
 trailer.m4: warning: AC_OUTPUT was never used
@@ -471,6 +475,11 @@ configure.ac:4: error: possibly undefined macro: AS@&t@_FOO
 configure.ac:5: error: possibly undefined macro: _AS@&t@_BAR
 configure.ac:6: error: possibly undefined macro: d@&t@nl
 ]])
+
+# Delay to make sure the cache files generated by the previous command
+# are considered to have been created in the past.
+sleep 2
+
 # A second run (without --force) should succeed and yield only the
 # warnings about AC_INIT and AC_OUTPUT.
 AT_CHECK_M4([autoconf], 0, [],
diff --git a/tests/torture.at b/tests/torture.at
index a96af651..46466f34 100644
--- a/tests/torture.at
+++ b/tests/torture.at
@@ -1964,7 +1964,7 @@ AT_CLEANUP
 ## Missing auxiliary files.  ##
 ## ------------------------- ##
 
-AT_SETUP([Missing auxiliary files])
+AT_SETUP([Missing auxiliary files (config.*)])
 AT_KEYWORDS([autoreconf])
 
 # Prevent autoreconf from running aclocal, which might not exist,
@@ -2023,6 +2023,12 @@ AT_CHECK([test ! -e build-aux/install-sh])
 
 AT_CHECK_CONFIGURE
 
+AT_CLEANUP
+
+
+AT_SETUP([Missing auxiliary files (install-sh)])
+AT_KEYWORDS([autoreconf])
+
 # Repeat all the above tests with a configure script that _doesn't_
 # need config.{sub,guess} but does need install-sh.
 
@@ -2062,6 +2068,47 @@ AT_CHECK_CONFIGURE
 
 AT_CLEANUP
 
+
+AT_SETUP([Missing auxiliary files (foreign)])
+AT_KEYWORDS([autoreconf])
+
+# If an aux file is required that autoreconf doesn't know how to install,
+# it shouldn't suggest autoreconf --install.
+# This also verifies that AC_REQUIRE_AUX_FILE can be used outside of a
+# macro definition, which was always the intent, and was recommended
+# usage in some automake recipes, but which was broken in autoconf
+# beta 2.69d (see https://savannah.gnu.org/support/?110363).
+
+AT_DATA([configure.ac],
+[[AC_INIT([GNU foo], [1.0])
+AC_CONFIG_AUX_DIR([build-aux])
+AC_REQUIRE_AUX_FILE([tap-driver.sh])
+AC_OUTPUT
+]])
+
+AT_CHECK_AUTOCONF
+AT_CHECK_CONFIGURE([], [1], [ignore],
+[configure: error: cannot find required auxiliary files: tap-driver.sh
+])
+
+AT_CHECK([autoreconf], 1, [],
+[configure.ac: error: required file 'tap-driver.sh' not found
+])
+AT_CHECK([test ! -e build-aux])
+
+AT_CHECK([autoreconf --install], 1, [],
+[configure.ac: error: required file 'tap-driver.sh' not found
+])
+# autoreconf --install always creates the aux directory.
+AT_CHECK([test -e build-aux])
+
+touch build-aux/tap-driver.sh
+
+AT_CHECK([autoreconf])
+AT_CHECK_CONFIGURE
+
+AT_CLEANUP
+
 ## ------------------------------ ##
 ## Files clobbered by AC_OPENMP.  ##
 ## ------------------------------ ##
