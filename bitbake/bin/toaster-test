#!/usr/bin/env python

import sys
import os
import argparse
import unittest
import logging

import importlib

bitbake_libdir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'lib')
sys.path.insert(0, bitbake_libdir)

from toaster.tests.base import ToasterOptions
from toaster.tests.setup import ToasterSetupTestCase

DEFAULT_TOASTER_TESTS_CFG = os.path.join(bitbake_libdir,  'toaster', 'tests',
    'toaster_test.cfg')
DEFAULT_TOASTER_CFG = os.path.join(os.environ['BUILDDIR'],  '..', 'meta-yocto',
    'conf', 'toasterconf.json')
DEFAULT_TOASTER_DB = os.path.join(os.environ['BUILDDIR'], 'toaster.sqlite')

test_suites = {}
test_suites['toaster.tests.ui'] = ['toaster_cases']

logger = None

def load_test(test, args, logger):
    """
        Returns an instance of class passing arguments
        to the class.
    """

    module_name = '.'.join(test.split('.')[:-2])
    class_name = test.split('.')[-2]
    test_name = test.split('.')[-1]

    module = importlib.import_module(module_name)
    clss = getattr(module, class_name)

    return clss(test_name, args, logger)

def get_tests(tests_filter=None):
    """
        Iterate over available tests suites and serach
        for tests that starts with test_.

        If tests_filter is specified only add tests that
        are in the test_filter list.
    """

    testslist = []
    tests_filter_dic = None

    if tests_filter:
        tests_filter_dic = dict((str(tf), False) for tf in tests_filter)

    def _filter_tests(test, tests_filter_dic):
        if not tests_filter_dic:
            return True
        if test in tests_filter_dic.keys():
            tests_filter_dic[test] = True
            return True
        return False

    for ts in test_suites.keys():
        m = importlib.import_module(ts)
        for clss in test_suites[ts]:
            for o in dir(getattr(m, clss)):
                full_clss = '.'.join((ts, clss))
                if o.startswith('test_') and _filter_tests(o[5:], tests_filter_dic):
                    testslist.append('.'.join((full_clss, o)))

    return testslist

def get_all_tests():
    return get_tests()

def get_tests_from_cfg(config, suite):
    try:
        tests_from_cfg = eval(config.get('toaster_test_' + suite, 'test_cases'))
    except:
        logger.error('Failed to get test cases from config file.' \
            'Make sure the format is correct.')
        raise

    testslist = get_tests(tests_from_cfg)

    return testslist

def buildResultClass(args):
    """Build a Result Class to use in the testcase execution"""

    class StampedResult(unittest.TextTestResult):
        """
        Custom TestResult that prints the time when a test starts.  As toaster-auto
        can take a long time (ie a few hours) to run, timestamps help us understand
        what tests are taking a long time to execute.
        """
        def startTest(self, test):
            import time
            self.stream.write(time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()) + " - ")
            super(StampedResult, self).startTest(test)

    return StampedResult

def get_args():
    parser = argparse.ArgumentParser(description="Script for run toaster tests.")

    parser.add_argument('--run-all-tests', required=False, action="store_true",
        dest="run_all_tests", default=False, help='Run all tests.')
    parser.add_argument('--run-suite', required=False, dest='run_suite',
        choices=['linux', 'windows', 'darwin'],
        help='Run suite (defined in config file)')
    parser.add_argument('--config', dest="config",
        default=DEFAULT_TOASTER_TESTS_CFG,
        help='Configuration for toaster tests, default: %s' %\
            DEFAULT_TOASTER_TESTS_CFG)
    parser.add_argument('--toaster-config', dest="toaster_config",
        default=DEFAULT_TOASTER_CFG,
        help='Configuration of toaster, default: %s' %\
            DEFAULT_TOASTER_CFG)
    parser.add_argument('--toaster-db', dest="toaster_db",
        default=DEFAULT_TOASTER_DB,
        help='Database of toaster, default: %s' %\
            DEFAULT_TOASTER_DB)
    parser.add_argument('--toaster-url', dest="toaster_url",
        help='URL of toaster instance')
    parser.add_argument('--test-browser', dest='test_browser',
        choices=['firefox', 'chrome', 'ie'],
        help='Web browser for use to run tests.')
    parser.add_argument('--verbose', required=False, action="store_true",
        dest="verbose", default=False, help='Enable verbose mode.')
    parser.add_argument('--debug', required=False, action="store_true",
        dest="debug", default=False, help='Enable debug mode.')

    return parser.parse_args()

def get_options(args):
    opts = ToasterOptions()

    opts.host_os = args.host_os
    opts.config = args.config
    opts.toaster_config = args.toaster_config
    opts.toaster_db = args.toaster_db
    opts.toaster_url = args.toaster_url
    opts.test_browser = args.test_browser

    opts.test_list = args.test_list

    return opts

def main(args):
    import platform
    import ConfigParser

    if args.verbose or args.debug:
        logging.basicConfig(stream=sys.stdout)
        root = logging.getLogger()
        root.setLevel(logging.DEBUG if args.debug else logging.INFO)
    else:
        logging.basicConfig(stream=sys.stderr)
    logger = logging.getLogger()

    args.host_os = platform.system().lower()
    if not args.run_suite:
        args.run_suite = args.host_os

    config = ConfigParser.SafeConfigParser()
    config.read(args.config)

    if args.run_all_tests:
        args.test_list = get_all_tests()
    else:
        args.test_list = get_tests_from_cfg(config, args.run_suite)

    if not args.toaster_url:
        args.toaster_url = eval(config.get('toaster_test_' + args.run_suite,
            'toaster_url'))
    if not args.test_browser:
        args.test_browser = eval(config.get('toaster_test_' + args.run_suite,
            'test_browser'))

    if not args.test_list:
        logger.error('Failed to get test cases.')
        sys.exit(1)

    opts = get_options(args)

    runner = unittest.TextTestRunner(verbosity=2, resultclass=buildResultClass(args))

    setup_suite = unittest.TestSuite()
    setup_suite.addTest(ToasterSetupTestCase('test_setupToaster', opts, logger))

    suite = unittest.TestSuite()
    for test in args.test_list:
        try:
            suite.addTest(load_test(test, opts, logger))
        except:
            logger.error("Can't load test %s" % str(test))
            raise

    result = runner.run(setup_suite)
    if result.wasSuccessful():
        result = runner.run(suite)

    if result.wasSuccessful():
        return 0
    else:
        return 1

if __name__ == "__main__":
    args = get_args()

    try:
        ret = main(args)
    except:
        import traceback
        ret = 1
        traceback.print_exc()
    sys.exit(ret)
