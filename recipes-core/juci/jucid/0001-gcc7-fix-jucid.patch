Index: git/src/juci.c
===================================================================
--- git.orig/src/juci.c
+++ git/src/juci.c
@@ -14,7 +14,7 @@
 	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 	GNU General Public License for more details.
 */
-
+#define _GNU_SOURCE
 #include <stdio.h>
 #include <unistd.h>
 #include <dirent.h>
@@ -57,11 +57,11 @@ int juci_load_plugins(struct juci *self,
         return -ENOENT; 
     }
     struct dirent *ent = 0; 
-    char fname[255]; 
+    char *fname; 
     while((ent = readdir(dir))){
         if(strcmp(ent->d_name, ".") == 0 || strcmp(ent->d_name, "..") == 0) continue; 
 
-        snprintf(fname, sizeof(fname), "%s/%s", path, ent->d_name); 
+        asprintf(&fname, "%s/%s", path, ent->d_name); 
         
         if(ent->d_type == DT_DIR) {
             rv |= juci_load_plugins(self, fname, base_path);  
@@ -262,11 +262,11 @@ static bool _try_auth(const char *sha1ha
 
 int _load_session_acls(struct juci_session *ses, const char *pat){
 	glob_t glob_result;
-	char path[255]; 
+	char *path; 
 	char *dir = getenv("JUCI_ACL_DIR_PATH"); 
 	if(!dir) dir = JUCI_ACL_DIR_PATH; 
 	DEBUG("loading acls from %s/%s.acl\n", dir, pat); 
-	snprintf(path, sizeof(path), "%s/%s.acl", dir, pat); 
+	asprintf(&path, "%s/%s.acl", dir, pat); 
 	glob(path, GLOB_TILDE, NULL, &glob_result);
 	for(unsigned int i=0;i<glob_result.gl_pathc;++i){
 		char *text = _load_file(glob_result.gl_pathv[i]); 
